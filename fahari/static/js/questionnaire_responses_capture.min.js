var SCALAR_VALUE="-",LIST_VALUE="[]",DICT_VALUE="{}";function annotateQuestionAnswerInput(e,n,a=False){if($question_answer_input=$(`[data-question=${e}]`),a)return $question_answer_input.addClass(),void $question_answer_input.prop("disabled",!0);$question_answer_input.prop("disabled",!1),n?$question_answer_input.addClass("is-valid"):$question_answer_input.addClass("is-invalid")}function cleanFormData(e){for(var n={},a=0;a<e.length;a++){var s=e[a],o="string"==typeof s.value?s.value.trim():s.value;n.hasOwnProperty(s.name)?n[s.name].push(o):n[s.name]=[o]}return n}function composeQuestionAnswersRequestPayload(e){var n,a,s,o={};for(n in e)e.hasOwnProperty(n)&&(a=retrieveQuestionDataFromInputName(n),s=e[n],o[a.question_id]=$.extend(o[a.question_id],{[a.field_name]:1===s.length?s[0]:s}));return o}function makeRequest(e,n,a="POST",s=()=>!0,o=()=>{},t=()=>{},r=()=>{}){$.ajax({beforeSend:s,complete:r,contentType:"application/json; charset=UTF-8",data:n,dataType:"json",error:t,headers:{"X-CSRFToken":$("[name=csrfmiddlewaretoken]").val()},method:a,success:o,url:e})}function markQuestionGroupAsApplicable(e,s){var o=$(`#btn_save_changes_${e}`),t=($(`#clp_${e}`),$(`#clp_toggle_${e}`)),n=$(`#spn_spinner_question_group_${e}`),e=JSON.stringify({question_group:e});makeRequest(s.data("mark_as_applicable"),e,"POST",function(){return s.bootstrapToggle("disable"),n.removeClass("d-none"),!0},function(e,n){if(console.log(e),1==e.success){for(var a in e.answers)e.answers.hasOwnProperty(a)&&(answer_data=e.answers[a].data,annotateQuestionAnswerInput(answer_data.question,answer_data.is_valid,answer_data.is_not_applicable));o.prop("disabled",!1),t.prop("disabled",!1)}},function(e,n,a){o.prop("disabled",!0),t.prop("disabled",!0),s.bootstrapToggle("off",!0)},function(){s.bootstrapToggle("enable"),n.addClass("d-none")})}function markQuestionGroupAsNonApplicable(e,s){var o=$(`#btn_save_changes_${e}`),n=$(`#clp_${e}`),t=$(`#clp_toggle_${e}`),a=$(`#spn_spinner_question_group_${e}`),e=JSON.stringify({question_group:e});makeRequest(s.data("mark_as_non_applicable"),e,"POST",function(){return o.prop("disabled",!0),n.collapse("hide"),t.prop("disabled",!0),a.removeClass("d-none"),s.bootstrapToggle("disable"),!0},function(e,n){if(console.log(e),1==e.success)for(var a in e.answers)e.answers.hasOwnProperty(a)&&(answer_data=e.answers[a].data,annotateQuestionAnswerInput(answer_data.question,answer_data.is_valid,answer_data.is_not_applicable))},function(e,n,a){o.prop("disabled",!1),t.prop("disabled",!1),s.bootstrapToggle("on",!0);e=e.responseJSON;console.error(e)},function(){a.addClass("d-none"),s.bootstrapToggle("enable")})}function retrieveQuestionDataFromInputName(e,n=":::",a,s){var o=e.indexOf(n),t=e.substring(0,o),e=e.substring(o+n.length),o=e.indexOf(n);return{field_name:t,question_id:e.substring(0,o),question_type:e.substring(o+n.length)}}document.addEventListener("DOMContentLoaded",function(){$(".applicability_toggle").on("change",function(){var e=$(this).data("question_group"),n=$(this).prop("checked"),a=$(this);(n?markQuestionGroupAsApplicable:markQuestionGroupAsNonApplicable)(e,a)}),$("form.question_group_answers_form button.save_changes").on("click",function(){var e=$(this).data("question_group"),n=composeQuestionAnswersRequestPayload(cleanFormData($(`#question_group_form_${e}`).serializeArray())),a=this,s=$(this).data("save_changes_url");$.ajax({beforeSend:function(){return $(a).prop("disabled",!0),$(a).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving ...'),!0},complete:function(){$(a).prop("disabled",!1),$(a).html("Save Changes")},contentType:"application/json; charset=UTF-8",data:JSON.stringify({question_group:e,question_answers:n}),dataType:"json",error:function(e,n,a){},headers:{"X-CSRFToken":$("[name=csrfmiddlewaretoken]").val()},method:"POST",success:function(e,n){if(console.log(e),1==e.success)for(var a in e.answers)e.answers.hasOwnProperty(a)&&(answer_data=e.answers[a].data)},url:s})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb25uYWlyZV9yZXNwb25zZXNfY2FwdHVyZS5taW4uanMiLCJzb3VyY2VzIjpbInF1ZXN0aW9ubmFpcmVfcmVzcG9uc2VzX2NhcHR1cmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFNDQUxBUl9WQUxVRSA9IFwiLVwiLCBMSVNUX1ZBTFVFID0gXCJbXVwiLCBESUNUX1ZBTFVFID0gXCJ7fVwiO1xuXG5cbmZ1bmN0aW9uIGFubm90YXRlUXVlc3Rpb25BbnN3ZXJJbnB1dChxdWVzdGlvbl9pZCwgaXNfdmFsaWQsIG5vdF9hcHBsaWNhYmxlPUZhbHNlKSB7XG4gICAgJHF1ZXN0aW9uX2Fuc3dlcl9pbnB1dCA9ICQoYFtkYXRhLXF1ZXN0aW9uPSR7cXVlc3Rpb25faWR9XWApO1xuICAgIGlmIChub3RfYXBwbGljYWJsZSkge1xuICAgICAgICAkcXVlc3Rpb25fYW5zd2VyX2lucHV0LmFkZENsYXNzKCk7XG4gICAgICAgICRxdWVzdGlvbl9hbnN3ZXJfaW5wdXQucHJvcChcImRpc2FibGVkXCIsIHRydWUpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgJHF1ZXN0aW9uX2Fuc3dlcl9pbnB1dC5wcm9wKFwiZGlzYWJsZWRcIiwgZmFsc2UpO1xuICAgIGlmIChpc192YWxpZClcbiAgICAgICAgJHF1ZXN0aW9uX2Fuc3dlcl9pbnB1dC5hZGRDbGFzcyhcImlzLXZhbGlkXCIpO1xuICAgIGVsc2VcbiAgICAgICAgJHF1ZXN0aW9uX2Fuc3dlcl9pbnB1dC5hZGRDbGFzcyhcImlzLWludmFsaWRcIik7XG59XG5cblxuZnVuY3Rpb24gY2xlYW5Gb3JtRGF0YShzZXJpYWxpemVkX2Zvcm1fZGF0YSkge1xuICAgIHZhciBjbGVhbmVkX2Zvcm1fZGF0YSA9IHt9O1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzZXJpYWxpemVkX2Zvcm1fZGF0YS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIGZvcm1fZW50cnkgPSBzZXJpYWxpemVkX2Zvcm1fZGF0YVtpbmRleF07XG5cbiAgICAgICAgdmFyIGNsZWFuZWRfZm9ybV92YWx1ZSA9ICh0eXBlb2YgZm9ybV9lbnRyeS52YWx1ZSA9PT0gXCJzdHJpbmdcIik/IGZvcm1fZW50cnkudmFsdWUudHJpbSgpIDogZm9ybV9lbnRyeS52YWx1ZTtcbiAgICAgICAgaWYgKGNsZWFuZWRfZm9ybV9kYXRhLmhhc093blByb3BlcnR5KGZvcm1fZW50cnkubmFtZSkpXG4gICAgICAgICAgICBjbGVhbmVkX2Zvcm1fZGF0YVtmb3JtX2VudHJ5Lm5hbWVdLnB1c2goY2xlYW5lZF9mb3JtX3ZhbHVlKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY2xlYW5lZF9mb3JtX2RhdGFbZm9ybV9lbnRyeS5uYW1lXSA9IFtjbGVhbmVkX2Zvcm1fdmFsdWVdO1xuICAgIH1cblxuICAgIHJldHVybiBjbGVhbmVkX2Zvcm1fZGF0YTtcbn1cblxuXG5mdW5jdGlvbiBjb21wb3NlUXVlc3Rpb25BbnN3ZXJzUmVxdWVzdFBheWxvYWQoY2xlYW5lZF9mb3JtX2RhdGEpIHtcbiAgICB2YXIgcmVxdWVzdF9wYXlsb2FkID0ge307XG4gICAgZm9yICh2YXIgZm9ybV9pbnB1dF9uYW1lIGluIGNsZWFuZWRfZm9ybV9kYXRhKSB7XG4gICAgICAgIGlmICghY2xlYW5lZF9mb3JtX2RhdGEuaGFzT3duUHJvcGVydHkoZm9ybV9pbnB1dF9uYW1lKSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgIHZhciBpbnB1dF9uYW1lX2NvbnRlbnRzID0gcmV0cmlldmVRdWVzdGlvbkRhdGFGcm9tSW5wdXROYW1lKGZvcm1faW5wdXRfbmFtZSk7XG4gICAgICAgIHZhciBpbnB1dF92YWx1ZSA9IGNsZWFuZWRfZm9ybV9kYXRhW2Zvcm1faW5wdXRfbmFtZV07XG4gICAgICAgIHJlcXVlc3RfcGF5bG9hZFtpbnB1dF9uYW1lX2NvbnRlbnRzLnF1ZXN0aW9uX2lkXSA9ICQuZXh0ZW5kKFxuICAgICAgICAgICAgcmVxdWVzdF9wYXlsb2FkW2lucHV0X25hbWVfY29udGVudHMucXVlc3Rpb25faWRdLFxuICAgICAgICAgICAgeyBbaW5wdXRfbmFtZV9jb250ZW50cy5maWVsZF9uYW1lXTogKGlucHV0X3ZhbHVlLmxlbmd0aCA9PT0gMSk/IGlucHV0X3ZhbHVlWzBdIDogaW5wdXRfdmFsdWUgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiByZXF1ZXN0X3BheWxvYWQ7XG59XG5cblxuZnVuY3Rpb24gbWFrZVJlcXVlc3QodXJsLCBkYXRhLCBtZXRob2QgPSBcIlBPU1RcIiwgYmVmb3JlX3NlbmQgPSAoKSA9PiB0cnVlLCBzdWNjZXNzX2hhbmRsZXIgPSAoKSA9PiB1bmRlZmluZWQsIGVycm9yX2hhbmRsZXIgPSAoKSA9PiB1bmRlZmluZWQsIGNvbXBsZXRlX2hhbmRsZXIgPSAoKSA9PiB1bmRlZmluZWQpIHtcbiAgICAkLmFqYXgoe1xuICAgICAgICBiZWZvcmVTZW5kOiBiZWZvcmVfc2VuZCxcbiAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlX2hhbmRsZXIsXG4gICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLThcIixcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICBlcnJvcjogZXJyb3JfaGFuZGxlcixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgXCJYLUNTUkZUb2tlblwiOiAkKFwiW25hbWU9Y3NyZm1pZGRsZXdhcmV0b2tlbl1cIikudmFsKCksXG4gICAgICAgIH0sXG4gICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICBzdWNjZXNzOiBzdWNjZXNzX2hhbmRsZXIsXG4gICAgICAgIHVybDogdXJsLFxuICAgIH0pO1xufVxuXG5cbmZ1bmN0aW9uIG1hcmtRdWVzdGlvbkdyb3VwQXNBcHBsaWNhYmxlKHF1ZXN0aW9uX2dyb3VwX2lkLCAkdGdsX2FwcGxpY2FiaWxpdHlfdG9nZ2xlKSB7XG4gICAgdmFyICRidG5fc2F2ZV9jaGFuZ2VzID0gJChgI2J0bl9zYXZlX2NoYW5nZXNfJHtxdWVzdGlvbl9ncm91cF9pZH1gKTtcbiAgICB2YXIgJGNscF9jb2xsYXBzZV9xdWVzdGlvbl9ncm91cCA9ICQoYCNjbHBfJHtxdWVzdGlvbl9ncm91cF9pZH1gKTtcbiAgICB2YXIgJGNscF90b2dnbGVfcXVlc3Rpb25fZ3JvdXAgPSAkKGAjY2xwX3RvZ2dsZV8ke3F1ZXN0aW9uX2dyb3VwX2lkfWApO1xuICAgIHZhciAkc3BuX3NwaW5uZXJfcXVlc3Rpb25fZ3JvdXAgPSAkKGAjc3BuX3NwaW5uZXJfcXVlc3Rpb25fZ3JvdXBfJHtxdWVzdGlvbl9ncm91cF9pZH1gKTtcblxuICAgIHZhciBiZWZvcmVfc2VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkdGdsX2FwcGxpY2FiaWxpdHlfdG9nZ2xlLmJvb3RzdHJhcFRvZ2dsZShcImRpc2FibGVcIik7XG4gICAgICAgICRzcG5fc3Bpbm5lcl9xdWVzdGlvbl9ncm91cC5yZW1vdmVDbGFzcyhcImQtbm9uZVwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBjb21wbGV0ZV9oYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICR0Z2xfYXBwbGljYWJpbGl0eV90b2dnbGUuYm9vdHN0cmFwVG9nZ2xlKFwiZW5hYmxlXCIpO1xuICAgICAgICAkc3BuX3NwaW5uZXJfcXVlc3Rpb25fZ3JvdXAuYWRkQ2xhc3MoXCJkLW5vbmVcIik7XG4gICAgfVxuICAgIHZhciBkYXRhID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBxdWVzdGlvbl9ncm91cDogcXVlc3Rpb25fZ3JvdXBfaWRcbiAgICB9KTtcbiAgICB2YXIgZXJyb3JfaGFuZGxlciA9IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgZXJyb3JfdGhyb3duKSB7XG4gICAgICAgICRidG5fc2F2ZV9jaGFuZ2VzLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgJGNscF90b2dnbGVfcXVlc3Rpb25fZ3JvdXAucHJvcChcImRpc2FibGVkXCIsIHRydWUpO1xuICAgICAgICAkdGdsX2FwcGxpY2FiaWxpdHlfdG9nZ2xlLmJvb3RzdHJhcFRvZ2dsZShcIm9mZlwiLCB0cnVlKTtcbiAgICB9XG4gICAgdmFyIG1hcmtfYXNfYXBwbGljYWJsZV91cmwgPSAkdGdsX2FwcGxpY2FiaWxpdHlfdG9nZ2xlLmRhdGEoXCJtYXJrX2FzX2FwcGxpY2FibGVcIik7XG4gICAgdmFyIHN1Y2Nlc3NfaGFuZGxlciA9IGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgaWYgKGRhdGFbXCJzdWNjZXNzXCJdICE9IHRydWUpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgZm9yICh2YXIgYW5zd2VyX2lkIGluIGRhdGEuYW5zd2Vycykge1xuICAgICAgICAgICAgaWYgKCFkYXRhLmFuc3dlcnMuaGFzT3duUHJvcGVydHkoYW5zd2VyX2lkKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgYW5zd2VyX2RhdGEgPSBkYXRhLmFuc3dlcnNbYW5zd2VyX2lkXS5kYXRhO1xuICAgICAgICAgICAgYW5ub3RhdGVRdWVzdGlvbkFuc3dlcklucHV0KGFuc3dlcl9kYXRhLnF1ZXN0aW9uLCBhbnN3ZXJfZGF0YS5pc192YWxpZCwgYW5zd2VyX2RhdGEuaXNfbm90X2FwcGxpY2FibGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgJGJ0bl9zYXZlX2NoYW5nZXMucHJvcChcImRpc2FibGVkXCIsIGZhbHNlKTtcbiAgICAgICAgJGNscF90b2dnbGVfcXVlc3Rpb25fZ3JvdXAucHJvcChcImRpc2FibGVkXCIsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBtYWtlUmVxdWVzdChtYXJrX2FzX2FwcGxpY2FibGVfdXJsLCBkYXRhLCBcIlBPU1RcIiwgYmVmb3JlX3NlbmQsIHN1Y2Nlc3NfaGFuZGxlciwgZXJyb3JfaGFuZGxlciwgY29tcGxldGVfaGFuZGxlcik7XG59XG5cblxuZnVuY3Rpb24gbWFya1F1ZXN0aW9uR3JvdXBBc05vbkFwcGxpY2FibGUocXVlc3Rpb25fZ3JvdXBfaWQsICR0Z2xfYXBwbGljYWJpbGl0eV90b2dnbGUpIHtcbiAgICB2YXIgJGJ0bl9zYXZlX2NoYW5nZXMgPSAkKGAjYnRuX3NhdmVfY2hhbmdlc18ke3F1ZXN0aW9uX2dyb3VwX2lkfWApO1xuICAgIHZhciAkY2xwX2NvbGxhcHNlX3F1ZXN0aW9uX2dyb3VwID0gJChgI2NscF8ke3F1ZXN0aW9uX2dyb3VwX2lkfWApO1xuICAgIHZhciAkY2xwX3RvZ2dsZV9xdWVzdGlvbl9ncm91cCA9ICQoYCNjbHBfdG9nZ2xlXyR7cXVlc3Rpb25fZ3JvdXBfaWR9YCk7XG4gICAgdmFyICRzcG5fc3Bpbm5lcl9xdWVzdGlvbl9ncm91cCA9ICQoYCNzcG5fc3Bpbm5lcl9xdWVzdGlvbl9ncm91cF8ke3F1ZXN0aW9uX2dyb3VwX2lkfWApO1xuXG4gICAgdmFyIGJlZm9yZV9zZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICRidG5fc2F2ZV9jaGFuZ2VzLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgJGNscF9jb2xsYXBzZV9xdWVzdGlvbl9ncm91cC5jb2xsYXBzZShcImhpZGVcIik7XG4gICAgICAgICRjbHBfdG9nZ2xlX3F1ZXN0aW9uX2dyb3VwLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgJHNwbl9zcGlubmVyX3F1ZXN0aW9uX2dyb3VwLnJlbW92ZUNsYXNzKFwiZC1ub25lXCIpO1xuICAgICAgICAkdGdsX2FwcGxpY2FiaWxpdHlfdG9nZ2xlLmJvb3RzdHJhcFRvZ2dsZShcImRpc2FibGVcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgY29tcGxldGVfaGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkc3BuX3NwaW5uZXJfcXVlc3Rpb25fZ3JvdXAuYWRkQ2xhc3MoXCJkLW5vbmVcIik7XG4gICAgICAgICR0Z2xfYXBwbGljYWJpbGl0eV90b2dnbGUuYm9vdHN0cmFwVG9nZ2xlKFwiZW5hYmxlXCIpO1xuICAgIH1cbiAgICB2YXIgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgcXVlc3Rpb25fZ3JvdXA6IHF1ZXN0aW9uX2dyb3VwX2lkXG4gICAgfSk7XG4gICAgdmFyIGVycm9yX2hhbmRsZXIgPSBmdW5jdGlvbihyZXF1ZXN0LCBzdGF0dXMsIGVycm9yX3Rocm93bikge1xuICAgICAgICAkYnRuX3NhdmVfY2hhbmdlcy5wcm9wKFwiZGlzYWJsZWRcIiwgZmFsc2UpO1xuICAgICAgICAkY2xwX3RvZ2dsZV9xdWVzdGlvbl9ncm91cC5wcm9wKFwiZGlzYWJsZWRcIiwgZmFsc2UpO1xuICAgICAgICAkdGdsX2FwcGxpY2FiaWxpdHlfdG9nZ2xlLmJvb3RzdHJhcFRvZ2dsZShcIm9uXCIsIHRydWUpO1xuXG4gICAgICAgIHZhciBkYXRhID0gcmVxdWVzdC5yZXNwb25zZUpTT047XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZGF0YSk7XG4gICAgfVxuICAgIHZhciBtYXJrX2FzX25vbl9hcHBsaWNhYmxlX3VybCA9ICR0Z2xfYXBwbGljYWJpbGl0eV90b2dnbGUuZGF0YShcIm1hcmtfYXNfbm9uX2FwcGxpY2FibGVcIik7XG4gICAgdmFyIHN1Y2Nlc3NfaGFuZGxlciA9IGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgaWYgKGRhdGFbXCJzdWNjZXNzXCJdICE9IHRydWUpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgZm9yICh2YXIgYW5zd2VyX2lkIGluIGRhdGEuYW5zd2Vycykge1xuICAgICAgICAgICAgaWYgKCFkYXRhLmFuc3dlcnMuaGFzT3duUHJvcGVydHkoYW5zd2VyX2lkKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgYW5zd2VyX2RhdGEgPSBkYXRhLmFuc3dlcnNbYW5zd2VyX2lkXS5kYXRhO1xuICAgICAgICAgICAgYW5ub3RhdGVRdWVzdGlvbkFuc3dlcklucHV0KGFuc3dlcl9kYXRhLnF1ZXN0aW9uLCBhbnN3ZXJfZGF0YS5pc192YWxpZCwgYW5zd2VyX2RhdGEuaXNfbm90X2FwcGxpY2FibGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbWFrZVJlcXVlc3QobWFya19hc19ub25fYXBwbGljYWJsZV91cmwsIGRhdGEsIFwiUE9TVFwiLCBiZWZvcmVfc2VuZCwgc3VjY2Vzc19oYW5kbGVyLCBlcnJvcl9oYW5kbGVyLCBjb21wbGV0ZV9oYW5kbGVyKTtcbn1cblxuXG5mdW5jdGlvbiByZXRyaWV2ZVF1ZXN0aW9uRGF0YUZyb21JbnB1dE5hbWUoaW5wdXRfbmFtZSwgZGVsaW1pdGVyPVwiOjo6XCIsIGxpc3RfdHlwZV9jaGFyPVwiW11cIiwgZGljdF90eXBlX2NoYXI9XCJ7fVwiKSB7XG4gICAgdmFyIGVuZF9vZl9maWVsZF9uYW1lID0gaW5wdXRfbmFtZS5pbmRleE9mKGRlbGltaXRlcik7XG4gICAgdmFyIGZpZWxkX25hbWUgPSBpbnB1dF9uYW1lLnN1YnN0cmluZygwLCBlbmRfb2ZfZmllbGRfbmFtZSk7XG4gICAgdmFyIHF1ZXN0aW9uX2lkX2FuZF90eXBlID0gaW5wdXRfbmFtZS5zdWJzdHJpbmcoZW5kX29mX2ZpZWxkX25hbWUgKyBkZWxpbWl0ZXIubGVuZ3RoKTtcbiAgICB2YXIgZW5kX29mX3F1ZXN0aW9uX2lkID0gcXVlc3Rpb25faWRfYW5kX3R5cGUuaW5kZXhPZihkZWxpbWl0ZXIpO1xuICAgIHZhciBxdWVzdGlvbl9pZCA9IHF1ZXN0aW9uX2lkX2FuZF90eXBlLnN1YnN0cmluZygwLCBlbmRfb2ZfcXVlc3Rpb25faWQpO1xuICAgIHZhciBxdWVzdGlvbl90eXBlID0gcXVlc3Rpb25faWRfYW5kX3R5cGUuc3Vic3RyaW5nKGVuZF9vZl9xdWVzdGlvbl9pZCArIGRlbGltaXRlci5sZW5ndGgpXG5cbiAgICByZXR1cm4ge2ZpZWxkX25hbWU6IGZpZWxkX25hbWUsIHF1ZXN0aW9uX2lkOiBxdWVzdGlvbl9pZCwgcXVlc3Rpb25fdHlwZTogcXVlc3Rpb25fdHlwZX07XG59XG5cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgJChcIi5hcHBsaWNhYmlsaXR5X3RvZ2dsZVwiKS5vbihcImNoYW5nZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHF1ZXN0aW9uX2dyb3VwX2lkID0gJCh0aGlzKS5kYXRhKFwicXVlc3Rpb25fZ3JvdXBcIik7XG4gICAgICAgIHZhciBxdWVzdGlvbl9ncm91cF9hcHBsaWNhYmlsaXR5ID0gJCh0aGlzKS5wcm9wKFwiY2hlY2tlZFwiKTtcbiAgICAgICAgdmFyICR0Z2xfYXBwbGljYWJpbGl0eV90b2dnbGUgPSAkKHRoaXMpO1xuXG4gICAgICAgIGlmICghcXVlc3Rpb25fZ3JvdXBfYXBwbGljYWJpbGl0eSlcbiAgICAgICAgICAgIG1hcmtRdWVzdGlvbkdyb3VwQXNOb25BcHBsaWNhYmxlKHF1ZXN0aW9uX2dyb3VwX2lkLCAkdGdsX2FwcGxpY2FiaWxpdHlfdG9nZ2xlKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbWFya1F1ZXN0aW9uR3JvdXBBc0FwcGxpY2FibGUocXVlc3Rpb25fZ3JvdXBfaWQsICR0Z2xfYXBwbGljYWJpbGl0eV90b2dnbGUpO1xuICAgIH0pO1xuXG4gICAgJChcImZvcm0ucXVlc3Rpb25fZ3JvdXBfYW5zd2Vyc19mb3JtIGJ1dHRvbi5zYXZlX2NoYW5nZXNcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHF1ZXN0aW9uX2dyb3VwX3BrID0gJCh0aGlzKS5kYXRhKFwicXVlc3Rpb25fZ3JvdXBcIik7XG4gICAgICAgIHZhciBxdWVzdGlvbl9ncm91cF9mb3JtX2RhdGEgPSAkKGAjcXVlc3Rpb25fZ3JvdXBfZm9ybV8ke3F1ZXN0aW9uX2dyb3VwX3BrfWApLnNlcmlhbGl6ZUFycmF5KCk7XG4gICAgICAgIHZhciBjbGVhbmVkX2Zvcm1fZGF0YSA9IGNsZWFuRm9ybURhdGEocXVlc3Rpb25fZ3JvdXBfZm9ybV9kYXRhKTtcbiAgICAgICAgdmFyIHF1ZXN0aW9uc19hbnN3ZXJzX2RhdGEgPSBjb21wb3NlUXVlc3Rpb25BbnN3ZXJzUmVxdWVzdFBheWxvYWQoY2xlYW5lZF9mb3JtX2RhdGEpO1xuXG4gICAgICAgIHZhciB0aGlzX2J1dHRvbiA9IHRoaXM7XG4gICAgICAgIHZhciBzYXZlX2NoYW5nZXNfdXJsID0gJCh0aGlzKS5kYXRhKFwic2F2ZV9jaGFuZ2VzX3VybFwiKTtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzX2J1dHRvbikucHJvcChcImRpc2FibGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgICQodGhpc19idXR0b24pLmh0bWwoYDxzcGFuIGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgc3Bpbm5lci1ib3JkZXItc21cIiByb2xlPVwic3RhdHVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPiBTYXZpbmcgLi4uYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQodGhpc19idXR0b24pLnByb3AoXCJkaXNhYmxlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgJCh0aGlzX2J1dHRvbikuaHRtbChcIlNhdmUgQ2hhbmdlc1wiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04XCIsXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb25fZ3JvdXA6IHF1ZXN0aW9uX2dyb3VwX3BrLFxuICAgICAgICAgICAgICAgIHF1ZXN0aW9uX2Fuc3dlcnM6IHF1ZXN0aW9uc19hbnN3ZXJzX2RhdGFcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHN0YXR1cywgZXJyb3JfdGhyb3duKSB7XG4vLyAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHJlcXVlc3QucmVzcG9uc2VKU09OO1xuLy8gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJYLUNTUkZUb2tlblwiOiAkKFwiW25hbWU9Y3NyZm1pZGRsZXdhcmV0b2tlbl1cIikudmFsKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhW1wic3VjY2Vzc1wiXSAhPSB0cnVlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBhbnN3ZXJfaWQgaW4gZGF0YS5hbnN3ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YS5hbnN3ZXJzLmhhc093blByb3BlcnR5KGFuc3dlcl9pZCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICBhbnN3ZXJfZGF0YSA9IGRhdGEuYW5zd2Vyc1thbnN3ZXJfaWRdLmRhdGE7XG4vLyAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGVRdWVzdGlvbkFuc3dlcklucHV0KGFuc3dlcl9kYXRhLnF1ZXN0aW9uLCBhbnN3ZXJfZGF0YS5pc192YWxpZCwgYW5zd2VyX2RhdGEuaXNfbm90X2FwcGxpY2FibGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cmw6IHNhdmVfY2hhbmdlc191cmwsXG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXSwibmFtZXMiOlsiU0NBTEFSX1ZBTFVFIiwiTElTVF9WQUxVRSIsIkRJQ1RfVkFMVUUiLCJhbm5vdGF0ZVF1ZXN0aW9uQW5zd2VySW5wdXQiLCJxdWVzdGlvbl9pZCIsImlzX3ZhbGlkIiwibm90X2FwcGxpY2FibGUiLCJGYWxzZSIsIiRxdWVzdGlvbl9hbnN3ZXJfaW5wdXQiLCIkIiwiYWRkQ2xhc3MiLCJwcm9wIiwiY2xlYW5Gb3JtRGF0YSIsInNlcmlhbGl6ZWRfZm9ybV9kYXRhIiwiY2xlYW5lZF9mb3JtX2RhdGEiLCJpbmRleCIsImxlbmd0aCIsImZvcm1fZW50cnkiLCJjbGVhbmVkX2Zvcm1fdmFsdWUiLCJ2YWx1ZSIsInRyaW0iLCJoYXNPd25Qcm9wZXJ0eSIsIm5hbWUiLCJwdXNoIiwiY29tcG9zZVF1ZXN0aW9uQW5zd2Vyc1JlcXVlc3RQYXlsb2FkIiwiZm9ybV9pbnB1dF9uYW1lIiwiaW5wdXRfbmFtZV9jb250ZW50cyIsImlucHV0X3ZhbHVlIiwicmVxdWVzdF9wYXlsb2FkIiwicmV0cmlldmVRdWVzdGlvbkRhdGFGcm9tSW5wdXROYW1lIiwiZXh0ZW5kIiwiZmllbGRfbmFtZSIsIm1ha2VSZXF1ZXN0IiwidXJsIiwiZGF0YSIsIm1ldGhvZCIsImJlZm9yZV9zZW5kIiwic3VjY2Vzc19oYW5kbGVyIiwiZXJyb3JfaGFuZGxlciIsImNvbXBsZXRlX2hhbmRsZXIiLCJhamF4IiwiYmVmb3JlU2VuZCIsImNvbXBsZXRlIiwiY29udGVudFR5cGUiLCJkYXRhVHlwZSIsImVycm9yIiwiaGVhZGVycyIsIlgtQ1NSRlRva2VuIiwidmFsIiwic3VjY2VzcyIsIm1hcmtRdWVzdGlvbkdyb3VwQXNBcHBsaWNhYmxlIiwicXVlc3Rpb25fZ3JvdXBfaWQiLCIkdGdsX2FwcGxpY2FiaWxpdHlfdG9nZ2xlIiwiJGJ0bl9zYXZlX2NoYW5nZXMiLCIkY2xwX3RvZ2dsZV9xdWVzdGlvbl9ncm91cCIsIiRzcG5fc3Bpbm5lcl9xdWVzdGlvbl9ncm91cCIsIkpTT04iLCJzdHJpbmdpZnkiLCJxdWVzdGlvbl9ncm91cCIsImJvb3RzdHJhcFRvZ2dsZSIsInJlbW92ZUNsYXNzIiwic3RhdHVzIiwiY29uc29sZSIsImxvZyIsImFuc3dlcl9pZCIsImFuc3dlcnMiLCJhbnN3ZXJfZGF0YSIsInF1ZXN0aW9uIiwiaXNfbm90X2FwcGxpY2FibGUiLCJyZXF1ZXN0IiwiZXJyb3JfdGhyb3duIiwibWFya1F1ZXN0aW9uR3JvdXBBc05vbkFwcGxpY2FibGUiLCIkY2xwX2NvbGxhcHNlX3F1ZXN0aW9uX2dyb3VwIiwiY29sbGFwc2UiLCJyZXNwb25zZUpTT04iLCJpbnB1dF9uYW1lIiwiZGVsaW1pdGVyIiwibGlzdF90eXBlX2NoYXIiLCJkaWN0X3R5cGVfY2hhciIsImVuZF9vZl9maWVsZF9uYW1lIiwiaW5kZXhPZiIsInN1YnN0cmluZyIsInF1ZXN0aW9uX2lkX2FuZF90eXBlIiwiZW5kX29mX3F1ZXN0aW9uX2lkIiwicXVlc3Rpb25fdHlwZSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uIiwidGhpcyIsInF1ZXN0aW9uX2dyb3VwX2FwcGxpY2FiaWxpdHkiLCJxdWVzdGlvbl9ncm91cF9wayIsInF1ZXN0aW9uc19hbnN3ZXJzX2RhdGEiLCJzZXJpYWxpemVBcnJheSIsInRoaXNfYnV0dG9uIiwic2F2ZV9jaGFuZ2VzX3VybCIsImh0bWwiLCJxdWVzdGlvbl9hbnN3ZXJzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxhQUFlLElBQUtDLFdBQWEsS0FBTUMsV0FBYSxLQUd4RCxTQUFTQyw0QkFBNEJDLEVBQWFDLEVBQVVDLEVBQWVDLE9BRXZFLEdBREFDLHVCQUF5QkMsb0JBQW9CTCxNQUN6Q0UsRUFHQSxPQUZBRSx1QkFBdUJFLGdCQUN2QkYsdUJB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
