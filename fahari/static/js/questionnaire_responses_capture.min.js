var SCALAR_VALUE="-",LIST_VALUE="[]",DICT_VALUE="{}";function cleanFormData(e){for(var n={},t=0;t<e.length;t++){var a=e[t],o="string"==typeof a.value?a.value.trim():a.value;n.hasOwnProperty(a.name)?n[a.name].push(o):n[a.name]=[o]}return n}function composeQuestionAnswersRequestPayload(e){var n,t,a,o={};for(n in e)e.hasOwnProperty(n)&&(t=retrieveQuestionDataFromInputName(n),a=e[n],o[t.question_id]=$.extend(o[t.question_id],{[t.field_name]:1===a.length?a[0]:a}));return o}function markQuestionGroupAsApplicable(e){$(`#clp_toggle_${e}`).prop("disabled",!1)}function markQuestionGroupAsNonApplicable(e){var n=$(`#clp_${e}`),e=$(`#clp_toggle_${e}`);n.collapse("hide"),e.prop("disabled",!0)}function retrieveQuestionDataFromInputName(e,n=":::",t,a){var o=e.indexOf(n),r=e.substring(0,o),e=e.substring(o+n.length),o=e.indexOf(n);return{field_name:r,question_id:e.substring(0,o),question_type:e.substring(o+n.length)}}document.addEventListener("DOMContentLoaded",function(){$(".applicability_toggle").on("change",function(){var e=$(this).data("question_group");($(this).prop("checked")?markQuestionGroupAsApplicable:markQuestionGroupAsNonApplicable)(e)}),$("form.question_group_answers_form button.save_changes").on("click",function(){var e=$(this).data("question_group"),n=composeQuestionAnswersRequestPayload(cleanFormData($(`#question_group_form_${e}`).serializeArray())),t=this,a=$(this).data("save_changes_url");$.ajax({beforeSend:function(){return $(t).prop("disabled",!0),$(t).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving ...'),!0},complete:function(){$(t).prop("disabled",!1),$(t).html("Save Changes")},contentType:"application/json; charset=UTF-8",data:JSON.stringify({question_group:e,question_answers:n}),dataType:"json",error:function(e,n,t){},headers:{"X-CSRFToken":$("[name=csrfmiddlewaretoken]").val()},method:"POST",success:function(e,n){},url:a})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
