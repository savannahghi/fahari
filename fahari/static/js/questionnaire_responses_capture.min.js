var SCALAR_VALUE="-",LIST_VALUE="[]",DICT_VALUE="{}";function annotateQuestionAnswerInput(e,n,s=False){if($question_answer_input=$(`[data-question=${e}]`),s)return $question_answer_input.addClass(),void $question_answer_input.prop("disabled",!0);$question_answer_input.prop("disabled",!1),n?$question_answer_input.addClass("is-valid"):$question_answer_input.addClass("is-invalid")}function cleanFormData(e){for(var n={},s=0;s<e.length;s++){var a=e[s],t="string"==typeof a.value?a.value.trim():a.value;n.hasOwnProperty(a.name)?n[a.name].push(t):n[a.name]=[t]}return n}function composeQuestionAnswersRequestPayload(e){var n,s,a,t={};for(n in e)e.hasOwnProperty(n)&&(s=retrieveQuestionDataFromInputName(n),a=e[n],t[s.question_id]=$.extend(t[s.question_id],{[s.field_name]:1===a.length?a[0]:a}));return t}function makeRequest(e,n,s="POST",a=()=>!0,t=()=>{},o=()=>{},r=()=>{}){$.ajax({beforeSend:a,complete:r,contentType:"application/json; charset=UTF-8",data:n,dataType:"json",error:o,headers:{"X-CSRFToken":$("[name=csrfmiddlewaretoken]").val()},method:s,success:t,url:e})}function markQuestionGroupAsApplicable(e,a){var t=$(`#btn_save_changes_${e}`),o=($(`#clp_${e}`),$(`#clp_toggle_${e}`)),n=$(`#spn_spinner_question_group_${e}`),e=JSON.stringify({question_group:e});makeRequest(a.data("mark_as_applicable"),e,"POST",function(){return a.bootstrapToggle("disable"),n.removeClass("d-none"),!0},function(e,n){if(1==e.success){for(var s in e.answers)e.answers.hasOwnProperty(s)&&(answer_data=e.answers[s].data,annotateQuestionAnswerInput(answer_data.question,answer_data.is_valid,answer_data.is_not_applicable));t.prop("disabled",!1),o.prop("disabled",!1)}},function(e,n,s){t.prop("disabled",!0),o.prop("disabled",!0),a.bootstrapToggle("off",!0)},function(){a.bootstrapToggle("enable"),n.addClass("d-none")})}function markQuestionGroupAsNonApplicable(e,a){var t=$(`#btn_save_changes_${e}`),n=$(`#clp_${e}`),o=$(`#clp_toggle_${e}`),s=$(`#spn_spinner_question_group_${e}`),e=JSON.stringify({question_group:e});makeRequest(a.data("mark_as_non_applicable"),e,"POST",function(){return t.prop("disabled",!0),n.collapse("hide"),o.prop("disabled",!0),s.removeClass("d-none"),a.bootstrapToggle("disable"),!0},function(e,n){if(1==e.success)for(var s in e.answers)e.answers.hasOwnProperty(s)&&(answer_data=e.answers[s].data,annotateQuestionAnswerInput(answer_data.question,answer_data.is_valid,answer_data.is_not_applicable))},function(e,n,s){t.prop("disabled",!1),o.prop("disabled",!1),a.bootstrapToggle("on",!0);e=e.responseJSON;console.error(e)},function(){s.addClass("d-none"),a.bootstrapToggle("enable")})}function retrieveQuestionDataFromInputName(e,n=":::",s,a){var t=e.indexOf(n),o=e.substring(0,t),e=e.substring(t+n.length),t=e.indexOf(n);return{field_name:o,question_id:e.substring(0,t),question_type:e.substring(t+n.length)}}document.addEventListener("DOMContentLoaded",function(){var e=$("#btn_submit"),n=$("#btn_submit_confirm"),a=$("#mdl_confirm_questionnaire_responses_submission");$(".applicability_toggle").on("change",function(){var e=$(this).data("question_group"),n=$(this).prop("checked"),s=$(this);(n?markQuestionGroupAsApplicable:markQuestionGroupAsNonApplicable)(e,s)}),$("form.question_group_answers_form button.save_changes").on("click",function(){var e=$(this).data("question_group"),n=composeQuestionAnswersRequestPayload(cleanFormData($(`#question_group_form_${e}`).serializeArray())),s=this,a=$(this).data("save_changes_url");$.ajax({beforeSend:function(){return $(s).prop("disabled",!0),$(s).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving ...'),!0},complete:function(){$(s).prop("disabled",!1),$(s).html("Save Changes")},contentType:"application/json; charset=UTF-8",data:JSON.stringify({question_group:e,question_answers:n}),dataType:"json",error:function(e,n,s){},headers:{"X-CSRFToken":$("[name=csrfmiddlewaretoken]").val()},method:"POST",success:function(e,n){if(1==e.success)for(var s in e.answers)e.answers.hasOwnProperty(s)&&(answer_data=e.answers[s].data)},url:a})}),e.click(function(){$.ajax({beforeSend:function(){return e.prop("disabled",!0),e.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing ...'),!0},complete:function(){e.prop("disabled",!1),e.html("Submit")},error:function(){},method:"GET",success:function(e,n){a.modal("show");var s=e.questions_count-e.answered_question_count,e="",e=0==s?"You are about to submit this questionnaire, once you do, you will not be able to edit it. Are you sure you want to proceed?":"You have "+s+" answered questions, if you proceed, they will be marked as non-applicable. Note that this is a non-reversible operation and once you submit, you can not edit the questionnaire. Are you sure you want to proceed?";a.find("#p_submission_content").html(e)},url:e.data("questionnaire_responses_stats_url")})}),n.click(function(){$("#fm_submit_form").submit()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
