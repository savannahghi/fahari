var DEFAULT_SERVER_CONNECTION_ERROR="An error occurred when trying to connect to the server, please try again later.",SCALAR_VALUE="-",LIST_VALUE="[]",DICT_VALUE="{}";function annotateQuestionGroupCompletionStatus(e,n){e=$("#bdg_completion_status_badge_"+e);n?e.removeClass("badge-warning").addClass("badge-success").html("Complete"):e.removeClass("badge-success").addClass("badge-warning").html("Incomplete")}function annotateQuestionWithInvalidAnswer(e,n){$question_answer_input=$(`[data-question=${e}]`),$question_error_container=$("#div_question_error_"+e),$question_answer_input.removeClass("is-valid").addClass("is-invalid"),$question_error_container.removeClass("d-none").html(`<small>${n}</small>`)}function annotateQuestionWithValidAnswer(e,n){$question_answer_input=$(`[data-question=${e}]`),$question_error_container=$("#div_question_error_"+e),$question_answer_input.removeClass("is-invalid").addClass("is-valid"),n?$question_answer_input.prop("disabled",!0):($question_answer_input.prop("disabled",!1),$question_error_container.html("").addClass("d-none"))}function cleanFormData(e){for(var n={},o=0;o<e.length;o++){var s=e[o],t="string"==typeof s.value?s.value.trim():s.value;n.hasOwnProperty(s.name)?n[s.name].push(t):n[s.name]=[t]}return n}function composeQuestionAnswersRequestPayload(e){var n,o,s,t={};for(n in e)e.hasOwnProperty(n)&&(o=retrieveQuestionDataFromInputName(n),s=e[n],t[o.question_id]=$.extend(t[o.question_id],{[o.field_name]:1===s.length?s[0]:s}));return t}function handleDataOnSuccessQuestionGroupAnswerSubmission(e){if(1==e.success){for(var n in e.answers)e.answers.hasOwnProperty(n)&&(answer_data=e.answers[n].data,annotateQuestionWithValidAnswer(n,answer_data.is_not_applicable));for(var n in e.errors)error_details=e.errors[n][0],annotateQuestionWithInvalidAnswer(n,error_details);annotateQuestionGroupCompletionStatus(e.question_group.id,e.question_group.is_complete)}}function handleErrorOnQuestionGroupAnswerSubmission(e,n=null){e=$("#div_question_group_error_"+e);n?e.removeClass("d-none").html(n):e.html("").addClass("d-none")}function handleErrorOnQuestionnaireSubmission(e=null){var n=$("#div_questionnaire_error");e?n.removeClass("d-none").html(e):n.html("").addClass("d-none")}function makeRequest(e,n,o="POST",s=()=>!0,t=()=>{},r=()=>{},a=()=>{}){$.ajax({beforeSend:s,complete:a,contentType:"application/json; charset=UTF-8",data:n,dataType:"json",error:r,headers:{"X-CSRFToken":$("[name=csrfmiddlewaretoken]").val()},method:o,success:t,url:e})}function markQuestionGroupAsApplicable(e,s){var t=$("#btn_save_changes_"+e),r=($("#clp_"+e),$("#clp_toggle_"+e)),o=$("#spn_spinner_question_group_"+e),e=JSON.stringify({question_group:e});makeRequest(s.data("mark_as_applicable"),e,"POST",function(){return s.bootstrapToggle("disable"),o.removeClass("d-none"),!0},function(e,n){handleDataOnSuccessQuestionGroupAnswerSubmission(e),t.prop("disabled",!1),r.prop("disabled",!1)},function(e,n,o){t.prop("disabled",!0),r.prop("disabled",!0),s.bootstrapToggle("enable"),s.bootstrapToggle("off",!0)},function(e,n){s.bootstrapToggle("enable"),o.addClass("d-none"),handleErrorOnQuestionnaireSubmission("error"===n?DEFAULT_SERVER_CONNECTION_ERROR:null)})}function markQuestionGroupAsNonApplicable(o,s){var t=$("#btn_save_changes_"+o),r=$("#clp_"+o),a=$("#clp_toggle_"+o),i=$("#spn_spinner_question_group_"+o),e=JSON.stringify({question_group:o});makeRequest(s.data("mark_as_non_applicable"),e,"POST",function(){return t.prop("disabled",!0),r.collapse("hide"),a.prop("disabled",!0),i.removeClass("d-none"),s.bootstrapToggle("disable"),!0},function(e,n){handleDataOnSuccessQuestionGroupAnswerSubmission(e)},function(e,n,o){t.prop("disabled",!1),a.prop("disabled",!1),r.collapse("show"),s.bootstrapToggle("on",!0)},function(e,n){i.addClass("d-none"),s.bootstrapToggle("enable"),"error"===n?(handleErrorOnQuestionGroupAnswerSubmission(o,DEFAULT_SERVER_CONNECTION_ERROR),s.bootstrapToggle("on",!0)):handleErrorOnQuestionGroupAnswerSubmission(o,null)})}function retrieveQuestionDataFromInputName(e,n=":::",o,s){var t=e.indexOf(n),r=e.substring(0,t),e=e.substring(t+n.length),t=e.indexOf(n);return{field_name:r,question_id:e.substring(0,t),question_type:e.substring(t+n.length)}}document.addEventListener("DOMContentLoaded",function(){var e=$("#btn_submit"),n=$("#btn_submit_confirm"),s=$("#mdl_confirm_questionnaire_responses_submission");$(".applicability_toggle").on("change",function(){var e=$(this).data("question_group"),n=$(this).prop("checked"),o=$(this);(n?markQuestionGroupAsApplicable:markQuestionGroupAsNonApplicable)(e,o)}),$("form.question_group_answers_form button.save_changes").on("click",function(){var o=$(this).data("question_group"),e=composeQuestionAnswersRequestPayload(cleanFormData($("#question_group_form_"+o).serializeArray())),s=this,n=$(this).data("save_changes_url");$.ajax({beforeSend:function(){return $(s).prop("disabled",!0),$(s).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving ...'),!0},complete:function(e,n){$(s).prop("disabled",!1),$(s).html("Save Changes"),handleErrorOnQuestionGroupAnswerSubmission(o,"error"===n?DEFAULT_SERVER_CONNECTION_ERROR:null)},contentType:"application/json; charset=UTF-8",data:JSON.stringify({question_group:o,question_answers:e}),dataType:"json",error:function(e,n,o){},headers:{"X-CSRFToken":$("[name=csrfmiddlewaretoken]").val()},method:"POST",success:function(e,n){handleDataOnSuccessQuestionGroupAnswerSubmission(e)},url:n})}),e.click(function(){$.ajax({beforeSend:function(){return e.prop("disabled",!0),e.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing ...'),!0},complete:function(){e.prop("disabled",!1),e.html("Submit")},error:function(){},method:"GET",success:function(e,n){s.modal("show");var o=e.questions_count-e.answered_question_count,e="",e=0==o?"You are about to submit this questionnaire, once you do, you will not be able to edit it. Are you sure you want to proceed?":"You have "+o+" answered questions, if you proceed, they will be marked as non-applicable. Note that this is a non-reversible operation and once you submit, you can not edit the questionnaire. Are you sure you want to proceed?";s.find("#p_submission_content").html(e)},url:e.data("questionnaire_responses_stats_url")})}),n.click(function(){$("#fm_submit_form").submit()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
