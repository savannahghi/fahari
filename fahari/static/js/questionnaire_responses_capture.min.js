document.addEventListener("DOMContentLoaded",function(){$("form.question_group_answers_form button.save_changes").on("click",function(){var e=$(this).data("question_group"),n=function(e){var n,t,r,s,a,i,o={};for(n in e)e.hasOwnProperty(n)&&(r=":::",s=i=a=s=void 0,s=(t=n).indexOf(r),a=t.substring(0,s),t=(i=t.substring(s+r.length)).indexOf(r),s=i.substring(0,t),r=i.substring(t+r.length),t=e[n],o[(r={field_name:a,question_id:s,question_type:r}).question_id]=$.extend(o[r.question_id],{[r.field_name]:1===t.length?t[0]:t}));return o}(function(e){for(var n={},t=0;t<e.length;t++){var r=e[t],s="string"==typeof r.value?r.value.trim():r.value;n.hasOwnProperty(r.name)?n[r.name].push(s):n[r.name]=[s]}return n}($(`#question_group_form_${e}`).serializeArray())),t=this,r=$(this).data("save_changes_url");$.ajax({beforeSend:function(){return $(t).prop("disabled",!0),$(t).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving ...'),!0},complete:function(){$(t).prop("disabled",!1),$(t).html("Save Changes")},contentType:"application/json; charset=UTF-8",data:JSON.stringify({question_group:e,question_answers:n}),dataType:"json",error:function(e,n,t){},headers:{"X-CSRFToken":$("[name=csrfmiddlewaretoken]").val()},method:"POST",success:function(e,n){},url:r})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
