document.addEventListener("DOMContentLoaded",function(){var n=$("#div_progress").hide(),i=$("#btn_ingest_data");i.disable=function(){$(this).prop("disabled",!0)},i.startLoading=function(t){$(this).prop("disabled",!0),$(this).html(`<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> ${t}`)},i.stopLoading=function(){$(this).prop("disabled",!1),$(this).html("Import")};var r=$("#id_status");function s(t,o){n.slideUp(),i.stopLoading(),r.addDivider();for(var e=0;e<o.length;e++)r.appendContent(o[e]+"\n");r.scrollToBottom()}function e(t){n.slideUp(),i.stopLoading(),r.addDivider(),0===t?r.appendContent("Nothing to import, everything up to date.\n"):r.appendContent("Successfully imported "+t+" rows.\n"),r.scrollToBottom()}r.addDivider=function(){for(var t=parseInt($(this).attr("cols")),o="-",e=1;e<t;e++)o+="-";this.appendContent("\n\n"+o+"\n")},r.appendContent=function(t){var o=$("#id_status");o.val(o.val()+t)},r.scrollToBottom=function(){var t=$("#id_status");t.animate({scrollTop:t.prop("scrollHeight")-t.height()},1e3)},$fm_import_stock_verification_receipts_form=$("#import_stock_verification_receipts_form"),i.click(function(t){var o;$fm_import_stock_verification_receipts_form.validate({errorClass:"invalid-feedback",errorElement:"span"}),$fm_import_stock_verification_receipts_form.valid()&&(o="/api/stock_receipts_adapters/"+$("#id_adapter").val()+"/ingest_from_last_position/",$.ajax({beforeSend:function(){return i.startLoading("Importing..."),!0},complete:function(){i.stopLoading()},contentType:"application/json; charset=UTF-8",data:{},dataType:"json",error:function(t,o,e){t=t.responseJSON;s(t.row_index,t.error_messages)},headers:{"X-CSRFToken":$("[name=csrfmiddlewaretoken]").val()},method:"POST",success:function(t,o){e(t.ingested_rows)},url:o}))})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
