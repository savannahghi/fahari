# Generated by Django 3.2.9 on 2021-11-22 13:46

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import fahari.common.models.base_models
import fahari.sims.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0024_auto_20210919_1704'),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.UUIDField(blank=True, null=True)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_by', models.UUIDField(blank=True, null=True)),
                ('precedence_display_type', models.CharField(blank=True, choices=[('bullet', 'Bullets'), ('numbered_td', 'Numbered with a trailing dot, E.g. 1., 2., 3.'), ('lower_case_letters_tcb', 'Lower case letter with trailing closing bracket, E.g. a), b), c)')], help_text='The precedence display type of a "container". This sets the precedence display type for all the child elements of this container but not the container itself.', max_length=150, null=True)),
                ('query', models.TextField(verbose_name='Question')),
                ('question_code', models.CharField(editable=False, help_text='A simple code that can be used to uniquely identify a question. This is mostly useful in the context of dependent question answers.', max_length=100, unique=True)),
                ('answer_type', models.CharField(choices=[('dependent', 'Dependent on Another Answer'), ('fraction', 'Fraction'), ('int', 'Whole Number'), ('none', 'Not Applicable'), ('real', 'Real Number'), ('select_one', 'Select One'), ('select_multiple', 'Select Multiple'), ('text_answer', 'Text Answer'), ('yes_no', 'Yes/No')], default='text_answer', help_text='Expected answer type', max_length=15)),
                ('precedence', models.PositiveSmallIntegerField(help_text='The rank of a question within it\'s "container". Used to position the question when rendering a questionnaire.')),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sims_question_related', to='common.organisation')),
                ('parent', models.ForeignKey(blank=True, help_text='The parent question that this question is part of.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub_questions', to='sims.question')),
            ],
            options={
                'ordering': ('-updated', '-created'),
                'abstract': False,
            },
            managers=[
                ('objects', fahari.sims.models.QuestionManager()),
            ],
        ),
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.UUIDField(blank=True, null=True)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_by', models.UUIDField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('questionnaire_type', models.CharField(choices=[('mentorship', 'Mentorship Questionnaire'), ('sims', 'SIMS Questionnaire'), ('other', 'Generic Questionnaire')], default='mentorship', max_length=15)),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sims_questionnaire_related', to='common.organisation')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
            },
            managers=[
                ('objects', fahari.common.models.base_models.AbstractBaseManager()),
            ],
        ),
        migrations.CreateModel(
            name='QuestionnaireResponses',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.UUIDField(blank=True, null=True)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_by', models.UUIDField(blank=True, null=True)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('finish_date', models.DateTimeField(blank=True, editable=False, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.facility')),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sims_questionnaireresponses_related', to='common.organisation')),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sims.questionnaire')),
            ],
            options={
                'ordering': ('-updated', '-created'),
                'abstract': False,
            },
            managers=[
                ('objects', fahari.common.models.base_models.AbstractBaseManager()),
            ],
        ),
        migrations.CreateModel(
            name='QuestionGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.UUIDField(blank=True, null=True)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_by', models.UUIDField(blank=True, null=True)),
                ('precedence_display_type', models.CharField(blank=True, choices=[('bullet', 'Bullets'), ('numbered_td', 'Numbered with a trailing dot, E.g. 1., 2., 3.'), ('lower_case_letters_tcb', 'Lower case letter with trailing closing bracket, E.g. a), b), c)')], help_text='The precedence display type of a "container". This sets the precedence display type for all the child elements of this container but not the container itself.', max_length=150, null=True)),
                ('title', models.CharField(max_length=255, verbose_name='Group title')),
                ('precedence', models.PositiveSmallIntegerField(help_text='The rank of a question group within it\'s "container". Used to position the question group when rendering a questionnaire.')),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sims_questiongroup_related', to='common.organisation')),
                ('parent', models.ForeignKey(blank=True, help_text='The parent question group that this question group belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub_question_groups', to='sims.questiongroup')),
                ('questionnaire', models.ForeignKey(help_text='The questionnaire that a question group belongs to. Sub-question groups should provide the same questionnaire as their parent question group.', on_delete=django.db.models.deletion.CASCADE, related_name='question_groups', to='sims.questionnaire')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            managers=[
                ('objects', fahari.sims.models.QuestionGroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='QuestionAnswer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.UUIDField(blank=True, null=True)),
                ('updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_by', models.UUIDField(blank=True, null=True)),
                ('is_not_applicable', models.BooleanField(default=False, help_text='Indicates that answer is not applicable for the attached question.')),
                ('response', models.JSONField(default=dict)),
                ('answered_on', models.DateTimeField(auto_now=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sims_questionanswer_related', to='common.organisation')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='answers', to='sims.question')),
                ('questionnaire_response', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='answers', to='sims.questionnaireresponses')),
            ],
            options={
                'ordering': ('-updated', '-created'),
                'abstract': False,
            },
            managers=[
                ('objects', fahari.common.models.base_models.AbstractBaseManager()),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='question_group',
            field=models.ForeignKey(help_text='The question group that a question belongs to. Sub-questions should provide the same group as their parent question.', on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='sims.questiongroup'),
        ),
        migrations.AddConstraint(
            model_name='questiongroup',
            constraint=models.UniqueConstraint(condition=models.Q(('parent__isnull', False)), fields=('precedence', 'parent'), name='unique_sims.questiongroup_precedence_for_parent_container'),
        ),
        migrations.AddConstraint(
            model_name='questiongroup',
            constraint=models.UniqueConstraint(condition=models.Q(('parent__isnull', True)), fields=('precedence', 'questionnaire'), name='unique_precedence_for_questionnaire'),
        ),
        migrations.AddConstraint(
            model_name='questionanswer',
            constraint=models.UniqueConstraint(fields=('question', 'questionnaire_response'), name='unique_together_question_and_questionnaire_response'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.UniqueConstraint(condition=models.Q(('parent__isnull', False)), fields=('precedence', 'parent'), name='unique_sims.question_precedence_for_parent_container'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.UniqueConstraint(condition=models.Q(('parent__isnull', True)), fields=('precedence', 'question_group'), name='unique_precedence_for_question_group'),
        ),
    ]
